#!/usr/bin/env python

import sys
sys.path.append('../community_networks_analysis')

from misclibs import navigateRoutingTables, LoopError
from collections import defaultdict
import glob
import json
import copy

class resultParser():

    def readTopology(self, pathPrefix):
        """ load all the .json files with the logged routing tables, 
        return the global time-varying routing table """
        jsonRt = defaultdict(dict)
        nodeSet = set()
        failedNodes = {}
        signallingSent = 0
        for topoFile in glob.glob(pathPrefix+"*.json"):
            try:
                f = open(topoFile, "r")
                j = json.load(f)
            except Exception as e:
                print "NOK", str(e)
                sys.exit(1)
            #nodeIP = ".".join(j["node"].split(":")[0].split(".")[:3])
            nodeIP = j["node"].split(":")[0]
            if j["fail"] == True:
                failedNodes[nodeIP] = j["failtime"]
            rt = j["log"]
            # number of samples per second
            logFrequency = j["logFrequency"]
            # number of loss in a second
            signallingSent += j["signalling"]
            sigPerSec = j["signalling"]/j["logInterval"]
            for logId, logDump in rt.items():
                jsonRt[logId][nodeIP] = logDump["RT"]
                jsonRt[logId]["time"] = logDump["time"]
            nodeSet.add(str(nodeIP))
        return jsonRt, nodeSet, failedNodes, signallingSent, sigPerSec, \
                logFrequency


    def checkRoutingTables(self, jsonRt, ns, failedNodes, silent=True):
        errors = 0
        loops = 0
        jsonRtPurged = copy.deepcopy(jsonRt)

        for failedNode, failureTime in failedNodes.items():
            if jsonRt["time"] > failureTime and failedNode in ns:
                ns.remove(failedNode)

        nl = list(ns)
        routesOk = 0
        for i in range(len(nl)):
            sIP = nl[i]
            for j in range(len(nl)):
                if i == j:
                    continue
                dIP = nl[j]
                try:
                    route = navigateRoutingTables(jsonRtPurged, sIP,
                        dIP, [], 0)
                except KeyError:
                    errors += 1
                    if not silent:
                        print "NOK!: there is no route from ", sIP, "to", dIP
                    continue
                except LoopError:
                    if not silent:
                        print "NOK: there is a loop from", sIP, "to", dIP
                    loops += 1
                    continue
                if not silent:
                    print "OK!: route", route
                routesOk += 1
        return routesOk, errors, loops


    def parseAllRuns(self, jsonRt, nodeSet, failedNodes, silent=False):

        retDict = {}
        # first we realign the logs, that can misaligned at start or beginning:

        idToPurge = []
        for logId, rt in sorted(jsonRt.items(),
                key = lambda x: int(x[0])):
                for node in nodeSet:
                    if node not in rt.keys():
                        # this node is not in the rt
                        if node not in failedNodes or \
                                (node in failedNodes and \
                                failedNodes[node] > rt["time"]):
                            # this node has not failed or has not failed
                            # yet, it should be in the RT
                            idToPurge.append(logId)
                            break
        for idx in idToPurge:
            del jsonRt[idx]

        for logId, rt in sorted(jsonRt.items(),
                key = lambda x: int(x[0])):
            ret = self.checkRoutingTables(
                    jsonRt[logId], nodeSet, failedNodes, silent=silent)
            retDict[jsonRt[logId]["time"]] = ret
        return retDict


if __name__ == "__main__":

    if len(sys.argv) < 2:
        print "This script parses dumps of routing tables, recomputes all the shortest paths"
        print "and finds the number and time of breakage of the network"
        print "usage: ./measure_breakage_time.py ",\
                "path_prefix"
        print "path_prefix is the prefix of the routing table files generated by dummyrouting"
        sys.exit(1)


    pathPrefix = sys.argv[1]

    p = resultParser()
    jsonRt, nodeSet, failedNodes, signallingSent, sigPerSec,\
        logFrequency = p.readTopology(pathPrefix)

    if not nodeSet:
        print "NOK: can not read routing tables"
        sys.exit(1)

    results = p.parseAllRuns(jsonRt, nodeSet, failedNodes)

    for time in sorted(results):
        print "FailedRoutes", time, results[time]
    print "Signalling: ", signallingSent


